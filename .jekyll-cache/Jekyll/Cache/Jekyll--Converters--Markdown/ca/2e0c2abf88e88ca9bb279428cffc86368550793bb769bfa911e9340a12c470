I";Y<!--
 >Theory and Computational Biology: From Molecular to System
-->
<!-- > 当你打开我这个网页时，恭喜你，你离毕业不远了，撸起袖子加油干啊，奥利给！  
> <p align="right">-- Forty Braver </p>
-->

<h1 id="1-introduction">1. Introduction</h1>

<p>Accurate description of the electrostatic interactions plays significant role in the molecular simulations. For well characterizing the electrostatic interactions, various polarizable methods have been proposed,<a href="#refer-anchor-1"><sup>1</sup></a> such as fluctuating charge (FQ), inducible dipole (ID), and Drude oscillator and so on. Among these methods, polarization catastrophe was observed. An alternative was polarizable Gaussian Multipole (pGM) Model which utilizing the Gaussian functions with the point charges and dipoles replaced by s-orbital  functions and p-orbital functions. This method could bypass the catastrophe automatically given the Gaussian functions are sufficiently diffuse. Recently, the robustness of pGM model has been validated on the interaction energies,<a href="#refer-anchor-2"><sup>2</sup></a> many-body interaction energies together with the non-additive and additive contribution,<a href="#refer-anchor-2"><sup>2</sup></a> and polarizability anisotropy.<a href="#refer-anchor-3"><sup>3</sup></a> However, the input file preparation for the pGM model parameter determination is error-prone and laborious. As a consequence, we developed a program, PyRESP_GEN , which is easy-to-use and flexible.<a href="#refer-anchor-4"><sup>4</sup></a> This program only requires ESP data file generated by espgen and could dumps 1st stage and 2nd stage file for pGM model parameterization, automatically.</p>

<p>In this tutorial, we will give a detailed instruction on how to make use of PyRESP_GEN<a href="#refer-anchor-4"><sup>4</sup></a> for the input generation of PyRESP<a href="#refer-anchor-2"><sup>2</sup></a>.</p>

<hr />

<p>This tutorial is organized in the following order:</p>
<ul>
  <li>Program Installation
    <ul>
      <li>PyRESP_GEN</li>
      <li>PyRESP</li>
    </ul>
  </li>
  <li>Arguments explanation of PyRESP_GEN</li>
  <li>Examples
    <ul>
      <li>CH3SCH3</li>
      <li>NH4+ (charged molecule)</li>
      <li>CH3NH2</li>
    </ul>
  </li>
  <li>References</li>
</ul>

<hr />

<h1 id="2-installation">2. Installation</h1>

<h4 id="21-installation-of-pyresp_gen">2.1 Installation of PyRESP_GEN</h4>

<ul>
  <li>From source</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone git@github.com:csu1505110121/pyresp_gen.git
$ cd pyresp_gen
$ conda env create -n ENV_NAME -f pyresp_gen_env.yml
$ conda activate ENV_NAME
$ export PATH=/path/to/pyresp_gen:$PATH
    Setting the environment path:
      - For `Zsh` Shell: Editing the ~/.zshrc and adding the following line:
         export PATH=/your/path/to/pyresp_gen:$PATH
      - For `Bash` User: Editing the ~/.bashrc file and adding the same line:
         export PATH=/your/path/to/pyresp_gen:$PATH
$ source ~/.zshrc or source ~/.bashrc (effective immediately)
</code></pre></div></div>

<p>The whole package contains the following files and arranged in such hierarchical structure</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tree
.
├── README.md
├── __init__.py
├── __pycache__
│   ├── constant.cpython-38.pyc
│   ├── constant_radii.cpython-38.pyc
│   ├── prepin.cpython-38.pyc
│   └── zmatrix.cpython-38.pyc
├── constant.py
├── constant_radii.py
├── example
│   ├── C2H6_b3lyp_321g_esp.dat
│   ├── C3H8_mp2_a4z_esp.dat
│   ├── C6H6_b3lyp_321g_esp.dat
│   ├── CH3F_ccsd_a4z_esp.dat
│   ├── CH3NH2_mp2_a4z_esp.dat
│   ├── CH3S2CH3_b3lyp_321g_esp.dat
│   ├── CH3SO2CH3_mp2_a4z_esp.dat
│   ├── CHNHOH_mp2_a4z_esp.dat
│   ├── H2_ccsd_a5z_esp.dat
│   ├── esp.dat
│   └── qiang_test_case_esp_b321.dat
├── prepin.py
├── pyresp_gen.py
├── pyresp_gen_env.yml
└── zmatrix.py
</code></pre></div></div>
<p>The necessary files are <code class="language-plaintext highlighter-rouge">constant.py</code>,<code class="language-plaintext highlighter-rouge">constant_radii.py</code>,<code class="language-plaintext highlighter-rouge">prepin.py</code>,<code class="language-plaintext highlighter-rouge">pyresp_gen.py</code>,and <code class="language-plaintext highlighter-rouge">zmatrix.py</code>.</p>

<p>Core functions are all stored in the file <code class="language-plaintext highlighter-rouge">zmatrix.py</code>. Some test examples could be found in directory <code class="language-plaintext highlighter-rouge">example</code>.</p>

<h4 id="22-installation-of-pyresp">2.2 Installation of PyRESP</h4>

<ul>
  <li>From source
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone git@github.com:ShijiZ/PyRESP.git
$ export PATH=/path/to/PyRESP:$PATH
  Setting the environment path:
    - For `Zsh` User: Editing the ~/.zshrc and adding the following line:
       export PATH=/your/path/to/PyRESP:$PATH
    - For `Bash` User: Editing the ~/.bashrc file and adding the same line:
       export PATH=/your/path/to/PyRESP:$PATH
$ export HOME_PYRESP=/your/path/to/PyRESP/polarizability
$ source ~/.zshrc or source ~/.bashrc (effective immediately)
</code></pre></div>    </div>
  </li>
</ul>

<p>The whole package contains the following files</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ tree
.
├── polarizability
│   └── pGM-pol-2016-09-01
├── py_resp.py
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">py_resp.py</code> is the main script, and <code class="language-plaintext highlighter-rouge">pGM-pol-2016-09-01</code> stores the polarizability parameters derived by Wang et al.<a href="#refer-anchor-3"><sup>3</sup></a></p>

<hr />

<h1 id="3-arguments-explanation">3. Arguments explanation</h1>

<h4 id="31-pyresp_gen">3.1 PyRESP_GEN</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  Usage: pyresp_gen.py [-h] --espdat ESPDAT [--Istage ISTAGE] [--IIstage IISTAGE] [--ptype PTYPE] [--dtype DTYPE] [--nmol NMOL]
                     [--charge CHARGE] [--QWTw QWTW] [--QWTs QWTS] [--PWTw PWTW] [--PWTs PWTS] [--EXC12 EXC12] [--EXC13 EXC13]
                     [--DEPTH DEPTH] [--verbose VERBOSE] [--strategy STRATEGY]
</code></pre></div></div>

<p><strong>Necessary arguments</strong>:</p>

<p><code class="language-plaintext highlighter-rouge">--espdat</code> or <code class="language-plaintext highlighter-rouge">-i</code> ESPDAT: Input file of esp data</p>

<p><strong>Optional arguments</strong>:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-h</code> or <code class="language-plaintext highlighter-rouge">--help</code>: Show help message and exit</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--Istage</code> or <code class="language-plaintext highlighter-rouge">-f1</code> ISTAGE: Output filename of 1st stage (default: <code class="language-plaintext highlighter-rouge">pyrespgen.1st</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--IIstage</code> or <code class="language-plaintext highlighter-rouge">-f2</code> IISTAGE: Output filename of 2nd stage (default: <code class="language-plaintext highlighter-rouge">pyrespgen.2nd</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--ptype</code> or <code class="language-plaintext highlighter-rouge">-p</code> PTYPE: Polarization type: 
 x <code class="language-plaintext highlighter-rouge">chg</code> | x <code class="language-plaintext highlighter-rouge">ind</code> |x <code class="language-plaintext highlighter-rouge">perm</code> | x <code class="language-plaintext highlighter-rouge">perm-v</code> (default: <code class="language-plaintext highlighter-rouge">chg</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--dtype</code> or <code class="language-plaintext highlighter-rouge">-d</code> DTYPE: Damping function type: 
 x <code class="language-plaintext highlighter-rouge">additive</code> | x <code class="language-plaintext highlighter-rouge">applequist</code> | x <code class="language-plaintext highlighter-rouge">tinker</code> | x <code class="language-plaintext highlighter-rouge">exp</code> | x <code class="language-plaintext highlighter-rouge">linear</code> (default: <code class="language-plaintext highlighter-rouge">additive</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--nmol</code> or <code class="language-plaintext highlighter-rouge">-n</code> NMOL: Number of conformations (default: <code class="language-plaintext highlighter-rouge">1</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--charge</code> or <code class="language-plaintext highlighter-rouge">-q</code> CHARGE: Total charge for this structure or conformer (default: <code class="language-plaintext highlighter-rouge">0</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--QWTw</code> or <code class="language-plaintext highlighter-rouge">-qwtw</code> QWTW: charge constraint ($a_q$) for 1st stage; (default: <code class="language-plaintext highlighter-rouge">0.0005</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--QWTs</code> or <code class="language-plaintext highlighter-rouge">-qwts</code> QWTS: charge constraint ($a_q$) for 2nd stage; (default: <code class="language-plaintext highlighter-rouge">0.001</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--PWTw</code> or <code class="language-plaintext highlighter-rouge">-pwtw</code> PWTW: permanent dipoles ($a_p$) for 1st stage; (default: <code class="language-plaintext highlighter-rouge">0.0005</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--PWTs</code> or <code class="language-plaintext highlighter-rouge">-pwts</code> PWTS: permanent dipoles ($a_p$) for 2nd stage; (default: <code class="language-plaintext highlighter-rouge">0.001</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--EXC12</code> or <code class="language-plaintext highlighter-rouge">-exc12</code> EXC12: include (0) or exclude (1) 1-2 interaction (default: <code class="language-plaintext highlighter-rouge">0</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--EXC13</code> or <code class="language-plaintext highlighter-rouge">-exc13</code> EXC13: include (0) or exclude (1) 1-3 interaction (default: <code class="language-plaintext highlighter-rouge">0</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--DEPTH</code> or <code class="language-plaintext highlighter-rouge">-depth</code> DEPTH: Maximum depth for searching equivalent atoms (default: <code class="language-plaintext highlighter-rouge">3</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--verbose</code> or <code class="language-plaintext highlighter-rouge">-v</code> VERBOSE: Print verbose information (default: <code class="language-plaintext highlighter-rouge">0</code>)</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">--strategy</code> or <code class="language-plaintext highlighter-rouge">-strategy</code> STRATEGY: Strategy for pGM-perm, only for debugging (default: <code class="language-plaintext highlighter-rouge">2</code>)</p>
  </li>
</ol>

<h4 id="32-pyresp">3.2 PyRESP</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Usage: py_resp.py [-O] -i input -o output [-q qin] [-ip polariz] -t qout -e espot -s esout
</code></pre></div></div>

<p><strong>Optional arguments</strong>:</p>

<ol>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-h</code>, <code class="language-plaintext highlighter-rouge">--help</code>:            Show this help message and exit</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-O</code>          :            Overwrite output files if they exist</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">-i</code>, <code class="language-plaintext highlighter-rouge">--input</code> INPUT
                    type: input, required; description: input of general information</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-e</code>, <code class="language-plaintext highlighter-rouge">--espot</code> ESPOT
                    type: input, required; description: input of ESP and coordinates</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-q</code>, <code class="language-plaintext highlighter-rouge">--qin</code> QIN   type: input, optional; description: replacement parameters</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-o</code>, <code class="language-plaintext highlighter-rouge">--output</code> OUTPUT
                    type: output, always produced; description: output of results</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-t</code>, <code class="language-plaintext highlighter-rouge">--qout</code> QOUT type: output, always produced; description: output of parameters</p>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">-s</code>, <code class="language-plaintext highlighter-rouge">--esout</code> ESOUT
                    type: output, optional; description: generated ESP values for new parameters</p>
  </li>
  <li><code class="language-plaintext highlighter-rouge">-ip</code> POLARIZ, –polariz POLARIZ
                    type: input, optional; description: atomic polarizabilities</li>
</ol>

<hr />

<h1 id="4-examples">4. Examples</h1>

<h4 id="41-case-1-ch3sch3">4.1 Case 1: CH3SCH3</h4>

<div align="center">
<img src="/assets/2023_pyrespgen/CH3SCH3_example.png" width="200" height="" alt="CH3SCH3" />
 </div>

<h4 id="411-generation-of-electrostatic-potentials-with-gaussian">4.1.1 Generation of electrostatic potentials with Gaussian</h4>

<p><strong>Step 1</strong>: input file generation</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(filename: CH3SCH3.com)
%chk=CH3SCH3_a2z                       (specify the chk file name)
%nproc=28                              (specify the num. of process )
%mem=28GB                              (specify the memory)
#b3lyp/aug-cc-pvdz                     (methods/basis sets)
#SCF=tight
#maxdisk=200GB                         
#Pop=MK iop(6/33=2) iop(6/42=6) iop(6/43=20)
#IOP(5/87=12)
#density=current

   C3 MP2/6-311++G(d,p) coordinates     (optional)

  0  (charge)                    1. (multiplicity)
  C (elem) -1.361796871769 (x coor) -0.515789669798  (y coor) -0.000057835254 (z coor) 
  H (elem) -2.293815474604 (x coor)  0.053063245903  (y coor) -0.000100910602 (z coor)
  H (elem) -1.338738381082 (x coor) -1.144434093987  (y coor) -0.893950138079 (z coor)
  H (elem) -1.338815515689 (x coor) -1.144425446053  (y coor)  0.893842578094 (z coor)
  S (elem)  0.000000000000 (x coor)  0.666316788502  (y coor) -0.000005794613 (z coor)
  C (elem)  1.361796871989 (x coor) -0.515789668820  (y coor)  0.000066888412 (z coor)
  H (elem)  2.293815474803 (x coor)  0.053063247384  (y coor)  0.000108971075 (z coor)
  H (elem)  1.338733743617 (x coor) -1.144425283672  (y coor)  0.893965305093 (z coor)
  H (elem)  1.338820151777 (x coor) -1.144434253910  (y coor) -0.893827410725 (z coor)
(blank is needed here)
(blank is needed here)
</code></pre></div></div>
<p>Input file: <a href="/assets/2023_pyrespgen/examples/CH3SCH3/CH3SCH3.com">CH3SCH3.com</a></p>

<p><strong>Step 2</strong>: Execute Gaussian</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Make sure you have install Gaussian 16 or 09 correctly.
$ g16 CH3SCH3.com &amp;
</code></pre></div></div>
<p>Output file: <a href="/assets/2023_pyrespgen/examples/CH3SCH3/CH3SCH3.log">CH3SCH3.log</a></p>

<p><strong>Step 3</strong>: Convert the log file into ESP file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ espgen_junmei -i CH3SCH3.gout -o CH3SCH3.dat -p 1
## You will see following files:
## ESPGEN.TMP and CH3SCH3.dat
</code></pre></div></div>
<p>Esp data file: <a href="/assets/2023_pyrespgen/examples/CH3SCH3/CH3SCH3.dat">CH3SCH3.dat</a></p>

<p>The <code class="language-plaintext highlighter-rouge">dat</code> file head is shown as below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   1     9 (num. of atoms) 3780 (num. of grids)    0 MOL        9   3780
   2                   -2.5734232E+00 (x coor) -9.7470177E-01 (y coor) -1.0960411E-04 (z coor)  6 (elem) c3 (atom type) C1
   3                   -4.3346818E+00 (x coor)  1.0027453E-01 (y coor) -1.9086232E-04 (z coor)  1 (elem) h1 (atom type) H1
   4                   -2.5298480E+00 (x coor) -2.1626667E+00 (y coor) -1.6893205E+00 (z coor)  1 (elem) h1 (atom type) H2
   5                   -2.5299954E+00 (x coor) -2.1626497E+00 (y coor)  1.6891183E+00 (z coor)  1 (elem) h1 (atom type) H3
   6                    0.0000000E+00 (x coor)  1.2591566E+00 (y coor) -1.1338356E-05 (z coor) 16 (elem) ss (atom type) S1
   7                    2.5734232E+00 (x coor) -9.7470177E-01 (y coor)  1.2661164E-04   6 c3  C2
   8                    4.3346818E+00 (x coor)  1.0027453E-01 (y coor)  2.0598013E-04 (z coor)  1 (elem) h1 (atom type) H4
   9                    2.5298404E+00  -2.1626497E+00   1.6893489E+00   1 h1  H5
  10                    2.5300029E+00  -2.1626667E+00  -1.6890881E+00   1 h1  H6
  11   -1.2030000E-03 (esp value)  -3.3327472E+00 (esp x coor)  3.4048894E-01 (esp y coor)  3.6662366E+00 (esp z coor)
</code></pre></div></div>

<h4 id="412-pyresp_gen-generation">4.1.2 PyRESP_GEN generation</h4>

<p><strong>Step 1</strong>: Input file generation</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># generating input file for RESP
$ cd 3-resp
$ pyresp_gen.py -i CH3SCH3.dat -p chg
# cd 4-ind
$ pyresp_gen.py -i CH3SCH3.dat -p ind
# cd 5-perm
$ pyresp_gen.py -i CH3SCH3.dat -p perm
</code></pre></div></div>

<p><a href="/assets/2023_pyrespgen/examples/CH3SCH3/3-resp">3-resp</a>; <a href="/assets/2023_pyrespgen/examples/CH3SCH3/4-ind">4-ind</a>; <a href="/assets/2023_pyrespgen/examples/CH3SCH3/5-perm">5-perm</a></p>

<h4 id="42-case-2-nh4">4.2 Case 2: NH4+</h4>

<div align="center">
<img src="/assets/2023_pyrespgen/NH4+.png" width="200" height="" alt="NH4+" />
 </div>

<h4 id="421-generation-of-electrostatic-potentials-with-gaussian">4.2.1 Generation of electrostatic potentials with Gaussian</h4>

<p><strong>Step 1</strong>: Input file generation</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>%chk=NH4+_b3lyp_a2z_esp
%nproc=28
%mem=28GB
#b3lyp/aug-cc-pvdz
#SCF=tight
#maxdisk=200GB
#Pop=MK iop(6/33=2) iop(6/42=6) iop(6/43=20)
#IOP(5/87=12)
#density=current

    Coordinates from nh4_m6311_opt.chk

    1    1
H   -0.951190136213    0.348537851523    0.152959323805
N   -0.000052158259    0.000090031932    0.000048013550
H    0.142159883375   -0.855519120874    0.545365091572
H    0.133112562719   -0.203821543598   -0.995003830076
H    0.676282797933    0.710172589425    0.296343319850

</code></pre></div></div>
<p><a href="/assets/2023_pyrespgen/examples/NH4+/NH4+.com">NH4+.com</a></p>

<p><strong>Step 2</strong>: Execute Gaussian</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ g16 NH4+.com &amp;
</code></pre></div></div>
<p><a href="/assets/2023_pyrespgen/examples/NH4+/NH4+.log">NH4+.log</a></p>

<p><strong>Step 3</strong>: Convert the log file into ESP file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ espgen_junmei -i NH4+.gout -o NH4+.dat -p 1
## You will see following files:
## ESPGEN.TMP and NH4+.dat
</code></pre></div></div>
<p><a href="/assets/2023_pyrespgen/examples/NH4+/NH4+.dat">NH4+.dat</a></p>

<h4 id="422-pyresp_gen-generation">4.2.2 PyRESP_GEN generation</h4>

<p><strong>Step 1</strong>: Input file generation</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>***  Caution                                          ***
***  for charged species                              ***
***  you need arg `-q` to specify the charge manually ***
# generating input file for RESP
$ cd 3-resp
$ pyresp_gen.py -i CH3SCH3.dat -p chg -q 1
# cd 4-ind
$ pyresp_gen.py -i CH3SCH3.dat -p ind -q 1
# cd 5-perm
$ pyresp_gen.py -i CH3SCH3.dat -p perm -q 1
</code></pre></div></div>

<h1 id="references">References</h1>

<div id="refer-anchor-1"></div>
<p>[1] Qiang Zhu, Yang Ge, Wei Li,* and Jing Ma*. <a href="https://pubs.acs.org/doi/abs/10.1021/acs.jctc.2c01130?casa_token=eu4gzasL3FgAAAAA:9WLmHUtsPjEvRSd4qAFw76UMxVgQdXr2MDYXNv0nnQsa929qSeTpTXxNlTssMeDPgFbtCvYrKbhtLnr1">Treating Polarization Effects in Charged and Polar Bio-Molecules Through Variable Electrostatic Parameters.</a> <em>J. Chem. Theory Comput.</em> <strong>2023</strong>, 19, 2, 396–411;</p>

<div id="refer-anchor-2"></div>
<p>[2] Shiji Zhao, Haixin Wei, Piotr Cieplak, Yong Duan,* and Ray Luo.* <a href="https://pubs.acs.org/doi/abs/10.1021/acs.jctc.2c00230?casa_token=ztCXn3gxZjgAAAAA:OXdVwLy-DwjKzCY2-62X302bHkTPHO5LqnZnSZfjSY5k2X_aCJScTlgynnnfSYbf-_ynAK9rHud0aFXj">PyRESP: A Program for Electrostatic Parameterizations of Additive and Induced Dipole Polarizable Force Fields.</a> <em>J. Chem. Theory Comput.</em> <strong>2022</strong>, 18, 6, 3654–3670</p>

<div id="refer-anchor-3"></div>
<p>[3] Junmei Wang*, Piotr Cieplak, Ray Luo, and Yong Duan*. <a href="https://pubs.acs.org/doi/abs/10.1021/acs.jctc.8b00603?casa_token=hzcpqUV1swgAAAAA:q_uwP4QZEup2RsmEgMMhHdRf0igZ8bSEm7-mcfaEAWlLjKDyIZ8UM0jZDpKoNXahsN0iklXs5OCt_aAS">Development of Polarizable Gaussian Model for Molecular Mechanical Calculations I: Atomic Polarizability Parameterization To Reproduce ab Initio Anisotropy.</a> <em>J. Chem. Theory Comput.</em> <strong>2019</strong>, 15, 2, 1146–1158</p>

<div id="refer-anchor-4"></div>
<p>[4] Qiang Zhu, Yong Duan,* Ray Luo.* <strong>2023</strong> (To be submitted)</p>

:ET